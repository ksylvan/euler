# Even Fibonacci numbers

# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

from testing import report_timing, run_doctest, timer

@timer
def even_fibonacci_sums(n: int) -> int:
    """
    Returns the sum of the even-valued terms of the Fibonacci sequence.

    >>> even_fibonacci_sums(20)
    10
    >>> even_fibonacci_sums(40)
    44
    >>> even_fibonacci_sums(4000000)
    4613732
    """

    a, b = 1, 1
    s = 0
    while a < n:
        a, b = b, a+b
        if a % 2 == 0:
            s += a
    return s

if __name__ == "__main__":
    run_doctest()
    print('@ Answer to Euler #2:', even_fibonacci_sums(4000000))
    report_timing()